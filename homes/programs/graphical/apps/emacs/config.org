#+TITLE: Emacs Configuration
#+AUTHOR: Squirrel
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* Introduction

This is my Emacs configuration.

* Basic Settings

** General Settings

Basic Emacs settings.

#+begin_src emacs-lisp
;;; init.el --- Emacs Configuration File for NixOS
;;; Commentary:
;;; Emacs configuration.

;;; Code:

;; Disable backup and auto-save files
(setq make-backup-files nil)
(setq auto-save-default nil)

;; Set up XDG directory
(setq user-emacs-directory "~/.config/emacs/")

;; Automatic bracket pairing
(electric-pair-mode 1)

;; Window navigation using Shift+arrow keys
(windmove-default-keybindings)

;; Disable bell sound
(setq ring-bell-function 'ignore)
#+end_src

** Display Settings

Configurations for how Emacs looks and displays information.

#+begin_src emacs-lisp
;; Display settings
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t)
(set-face-attribute 'default nil :height 130)

;; Disable UI elements for a cleaner interface
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode -1)

;; Load font
(use-package all-the-icons)

#+end_src

* Package Management

Package management in Emacs

#+begin_src emacs-lisp
;; Initialize package management
(require 'package)

;; Package archives setup - legacy
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)

;; For NixOS: Don't automatically install packages since that's handled by Nix
(require 'use-package)

;; For NixOS: Don't try to ensure packages are installed through package.el
;; since they should be provided by the Nix configuration
(setq use-package-always-ensure nil)

;; Make use-package verbose for debugging
;; (setq use-package-verbose t)
#+end_src

* UI Enhancements

Configuration for themes and UI improvements.

** Theme Setup

#+begin_src emacs-lisp
;; Theme setup
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
(load-theme 'my-kitty t)
#+end_src

** Dashboard

Welcome screen for Emacs.

#+begin_src emacs-lisp
;; Dashboard
(use-package dashboard
  :config
  (setq dashboard-banner-logo-title
        "
            .
          :*%.
      :-+*%%%:
    =#%%%%#%#       ..:::..
  .*%%##%%%#.   :=*#%%%%%%%#*=:
  #%%%%%#*=  .+#%%%%%%%%##%%%%%#=
  +**+====  =%%%%#*****#%%%%%%%%%#-
      -*%- +%#+-.       :+%%%%%%%%%=
    :#%%# =%+.            :#%%%%%%%%.
   .#%#%+ %=               #%%%%%%#%-
   ,*%#%%+.*      =:.    .-#%%%%%%%%%.
   #%%%%*.-      -%%####%%%%%%%%%%%-
   ,*%%%%#..       .*%%%%%##%%%%%%*:
   :%%%%%+          :+*#%%%%%%#+:
    -%%#==-            ..::::.
     .=:+%%:
  :--. +%#=
 =****-.:
")
  (setq dashboard-startupify-list '(dashboard-insert-newline
                                    dashboard-insert-banner-title
                                    dashboard-insert-newline
                                    dashboard-insert-navigator
                                    dashboard-insert-newline
                                    dashboard-insert-init-info
                                    dashboard-insert-items
                                    dashboard-insert-newline
                                    dashboard-insert-footer))
  ;; Usual dashboard settings
  (setq dashboard-vertically-center-content t
        dashboard-center-content t
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-icon-type 'icons)

  (dashboard-setup-startup-hook))
#+end_src

** Minimap

Code overview sidebar.

#+begin_src emacs-lisp
;; Minimap - code overview sidebar
(use-package minimap
  :bind (("C-c m" . minimap-mode))
  :config
  (setq minimap-window-location 'right)
  (custom-set-faces
   '(minimap-active-region-background
     ((((background dark)) (:background "#3e3e3e"))
      (((background light)) (:background "#d0d0d0"))
      (t (:background "#3e3e3e"))))))
#+end_src

** Rainbow Mode

Colorize color strings in buffers.

#+begin_src emacs-lisp
;; Rainbow mode - colorize color strings
(use-package rainbow-mode
  :hook ((prog-mode . rainbow-mode)
         (conf-mode . rainbow-mode)
         (css-mode . rainbow-mode)
         (html-mode . rainbow-mode)
         (text-mode . rainbow-mode))
  :config
  (setq rainbow-x-colors nil
        rainbow-html-colors t
        rainbow-latex-colors t
        rainbow-r-colors nil
        rainbow-ansi-colors t
        rainbow-escape-sequences t))
#+end_src

* Navigation & Productivity

Tools and configurations to improve Emacs navigation and productivity.

** Neotree

File system explorer.

#+begin_src emacs-lisp
;; Neotree - file system explorer
(use-package neotree
  :bind ([f8] . neotree-toggle)
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (custom-set-faces
   '(neo-dir-link-face ((t (:foreground "#FF9D64"))))
   '(neo-expand-btn-face ((t (:foreground "#FF9D64"))))
   '(neo-file-link-face ((t (:foreground "#FFFFFF"))))
   '(neo-root-dir-face ((t (:foreground "#FF9D64" :weight bold))))))
#+end_src

** Multiple Cursors

Edit multiple regions simultaneously.

#+begin_src emacs-lisp
;; Multiple cursors
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

** Workgroups2

Window configuration management.

#+begin_src emacs-lisp
;; Workgroups2 - window configuration management
(use-package workgroups2
  :config
  (workgroups-mode 1)
  (setq wg-session-file "~/.config/emacs/workgroups"
        wg-emacs-exit-save-behavior 'save
        wg-workgroups-mode-exit-save-behavior 'save
        wg-mode-line-display-on t
        wg-flag-modified t)
  :bind (("C-c w c" . wg-create-workgroup)
         ("C-c w k" . wg-kill-workgroup)
         ("C-c w s" . wg-switch-to-workgroup)
         ("C-c w r" . wg-rename-workgroup)))
#+end_src

** Elscreen

Tab system for Emacs.

#+begin_src emacs-lisp
;; Elscreen - tab system for Emacs
(use-package elscreen
  :config
  (elscreen-start))
#+end_src

* LSP Integration

Configuration for Language Server Protocol.

** LSP Mode

LSP mode configuration

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :hook ((prog-mode . (lambda ()
                        (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'org-mode)
                          (lsp-deferred))))
         (lsp-mode . lsp-enable-which-key-integration))
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  ;; Performance optimizations
  (setq gc-cons-threshold 100000000           ;; 100mb
        read-process-output-max (* 1024 1024) ;; 1mb
        lsp-idle-delay 0.1
        lsp-log-io nil
        lsp-completion-provider :capf
        lsp-prefer-flymake nil
        lsp-enable-file-watchers nil)

  ;; UI customizations
  (setq lsp-lens-enable t
        lsp-headerline-breadcrumb-enable t
        lsp-modeline-diagnostics-enable t
        lsp-modeline-code-actions-enable t
        lsp-signature-auto-activate t
        lsp-signature-render-documentation t
        lsp-eldoc-enable-hover t
        lsp-eldoc-render-all t))
#+end_src

** LSP UI

LSP inline documentation and more.

#+begin_src emacs-lisp
(use-package lsp-ui
  :commands lsp-ui-mode
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :config

  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-update-mode 'point)

  (setq lsp-ui-doc-enable t
        lsp-ui-doc-position 'bottom
        lsp-ui-doc-delay 0.2
        lsp-ui-doc-show-with-cursor t)

  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c l d" . lsp-ui-doc-show)
              ("C-c l s" . lsp-ui-find-workspace-symbol)))
#+end_src

** Company LSP Integration

Improves Company integration with LSP for better completions.

#+begin_src emacs-lisp
;; Company for LSP integration
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0
        company-tooltip-align-annotations t
        company-selection-wrap-around t
        company-show-quick-access t
        company-tooltip-limit 10
        company-tooltip-flip-when-above t))
#+end_src

Add icons to complections
#+begin_src emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode)
  :config
  (setq company-box-icons-alist 'company-box-icons-all-the-icons))
#+end_src

** Which Key Integration

Provides hints for available LSP keybindings.

#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+end_src

** Language-Specific LSP Setup

#+begin_src emacs-lisp
(use-package lsp-pyright
  :hook (python-mode . (lambda () (require 'lsp-pyright) (lsp-deferred))))

(add-hook 'js-mode-hook #'lsp-deferred)
(add-hook 'typescript-mode-hook #'lsp-deferred)
(add-hook 'nix-mode-hook #'lsp-deferred)
(add-hook 'c-mode-hook #'lsp-deferred)
(add-hook 'c++-mode-hook #'lsp-deferred)
(add-hook 'rust-mode-hook #'lsp-deferred)


(use-package css-mode
  :mode ("\\.css\\'" "\\.scss\\'" "\\.less\\'")
  :hook ((css-mode . lsp-deferred)
         (scss-mode . lsp-deferred))
  :config
  (setq css-indent-offset 2))
#+end_src

#+begin_src emacs-lisp
;; Nix mode
(use-package nix-mode
  :mode "\\.nix\\'"
  :hook (nix-mode . format-all-mode))
#+end_src

** C/C++ LSP Configuration

For some reason the prior setup did not hook C++/C correctly. I am going nuclear here.

#+begin_src emacs-lisp
(use-package cc-mode
  :mode (("\\.c\\'" . c-mode)
         ("\\.h\\'" . c-mode)
         ("\\.cpp\\'" . c++-mode)
         ("\\.hpp\\'" . c++-mode))
  :hook ((c-mode . lsp-deferred)
         (c++-mode . lsp-deferred))
  :config
  (setq c-basic-offset 4))

(use-package lsp-mode
  :config
  (setq lsp-clients-clangd-args '("-j=4"
                                  "--background-index"
                                  "--clang-tidy"
                                  "--completion-style=detailed"
                                  "--header-insertion=iwyu"
                                  "--suggest-missing-includes"))
  (setq lsp-clangd-binary-path (executable-find "clangd")))

(add-hook 'c-mode-hook (lambda ()
                         (setq-local company-backends
                                     '(company-capf company-files))))
(add-hook 'c++-mode-hook (lambda ()
                           (setq-local company-backends
                                       '(company-capf company-files))))
#+end_src 

** Format-all

Code formatting.

#+begin_src emacs-lisp
(use-package format-all
  :commands format-all-mode
  :hook ((prog-mode . format-all-ensure-formatter)
         (before-save . format-all-buffer))
  :config
  (setq format-all-show-errors 'warnings))
#+end_src

** Org Mode

I played around with different org packages to display various things.
I think I should default to just the org-modern with a few config tweaks to it.
For now this setup works, so I'll leave it be.

#+begin_src emacs-lisp
;; Org mode configuration
(use-package org
  :mode ("\\.org\\'" . org-mode)
  :config
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))

  ;; Syntax highlighting in source blocks while editing
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t)

  ;; Visual-line-mode for wrapped lines
  (add-hook 'org-mode-hook 'visual-line-mode)

  ;; Variable-pitch fonts for text
  (add-hook 'org-mode-hook 'variable-pitch-mode)

  ;; Keep fixed-pitch for code, tables, etc.
  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-table ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit fixed-pitch))))
   '(org-verbatim ((t (:inherit fixed-pitch)))))

  ;; Add structure template shortcuts
  (require 'org-tempo)

  ;; Preview LaTeX fragments
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  (setq org-latex-create-preview-through-shell-escape t)

  (use-package org-modern
    :hook (org-mode . org-modern-mode)))

;; Prevent identation while edeting org documents
(add-hook 'org-mode-hook
    	  (lambda ()
    	    (electric-indent-local-mode -1)
    	    (setq org-edit-src-content-indentation 0)))

;; Overwrite org-return-indent, as it prevents evil
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-j") 'next-line))
#+end_src

* Custom Keybindings

My custom key bindings. I should probably use the evil package.

#+begin_src emacs-lisp
;; HJKL navigation (EVIL HAHAHA)
(global-set-key (kbd "C-l") 'forward-char)
(global-set-key (kbd "C-h") 'backward-char)
(global-set-key (kbd "C-k") 'previous-line)
(global-set-key (kbd "C-j") 'next-line)
(global-set-key (kbd "M-l") 'forward-word)
(global-set-key (kbd "M-h") 'backward-word)

;; Misc bindings
(global-set-key (kbd "C-c l") 'recenter-top-bottom)
(global-set-key (kbd "C-c k") 'kill-line)
(global-set-key (quote [M-down]) (quote scroll-up-line))
(global-set-key (quote [M-up]) (quote scroll-down-line))
#+end_src

* System Integration

System-specific integrations.

** Wayland Clipboard Integration

#+begin_src emacs-lisp
;; Wayland clipboard integration
(defun wl-copy (text)
  "Copy TEXT to Wayland clipboard using wl-copy."
  (let ((p (make-process :name "wl-copy"
                         :command '("wl-copy")
                         :connection-type 'pipe)))
    (process-send-string p text)
    (process-send-eof p)))
(setq interprogram-cut-function 'wl-copy)
#+end_src

* NixOS Specific Settings

Settings specific to NixOS.

#+begin_src emacs-lisp
;; Prevent Custom from modifying this file
(when (file-exists-p custom-file)
  (load custom-file))

(provide 'init)
;;; init.el ends here
#+end_src
