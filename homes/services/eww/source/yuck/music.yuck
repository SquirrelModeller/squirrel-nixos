(deflisten song_information :initial "" "playerctl --follow metadata --format  `date +'{\"artist\":\"'{{artist}}'\",\"song\":\"'{{title}}'\",\"player\":\"'{{status}}'\",\"cover_art\":\"'{{mpris:artUrl}}'\"}'`")
(defvar control_music false)
(defvar button_active true)

(defwidget music []
  (eventbox
    :onhover "${EWW_CMD} update control_music=true"
    :onhoverlost "${EWW_CMD} update control_music=false "
    (box :class "album_art music_borders"
      :visible {song_information.song == "" ? "false" : "true"}
      :style "background-image: url('${song_information.cover_art}');"
      (box :class "mutebg music_borders"
        :space-evenly "false"
        (box :orientation "v"
          (label :class "song"
            :halign "start"
            :show-truncated "false"
          :text {song_information.song})
          (label :class "song_artist"
            :halign "start"
            :show-truncated "false"
            :text {replace(song_information.artist, " - Topic", "")}))
        (revealer :reveal control_music
          :transition "slideleft"
          :duration "350ms"
          (box :class "music_popup"
            :orientation "v"
            :valign "center"
            (box :class "music_controls"
              :width  "80"
              (button :onclick "playerctl previous" "")
              (button :class {button_active ? "active" : "inactive"}
                :onclick "playerctl play-pause"
              {song_information.player == "Playing" ? "󰏤" : "󰐊"})
              (button :onclick "playerctl next" ""))
            (scale :class "volume-slider"
              :min 0
              :max 100
              :value "${volume}"
              :tooltip "${volume}%"
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
          ))))))

(defwindow musicplayer
  :stacking "fg"
  :focusable "false"
  :monitor 0
  :geometry (geometry
  :anchor "top center")
  (music))
