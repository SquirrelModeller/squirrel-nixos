{ config, lib, pkgs, ... }:
let
  inherit (lib) mkIf mkMerge;
  env = config.modules.usrEnv;
  colors = config.modules.style.colorScheme.colors;

  renderCss = cssTemplate:
    lib.strings.replaceStrings
      [ "base00" "base01" "base02" "base03" "base99" ]
      [ colors.base00 colors.base01 colors.base02 colors.base03 colors.background ]
      cssTemplate;

  mkPerUserFiles = username:
    let
      cssTemplate = builtins.readFile (./firefox/userChrome.css);
      cssFile = pkgs.writeText "userChrome-${username}.css" (renderCss cssTemplate);
      userJs = pkgs.writeText "user-${username}.js" ''
        // generated by Nix
        user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);
        user_pref("browser.startup.page", 3);
        user_pref("browser.toolbars.bookmarks.visibility", "never");
        user_pref("browser.tabs.allow_transparent_browser", true);
        user_pref("browser.display.background_color", "${colors.background}");
      '';
      profilesIni = pkgs.writeText "profiles-${username}.ini" ''
        [General]
        StartWithLastProfile=1

        [Profile0]
        Name=squirrel
        IsRelative=1
        Path=squirrel
        Default=1
      '';
    in
    {
      ".mozilla/firefox/profiles.ini".source = profilesIni;
      ".mozilla/firefox/squirrel/user.js".source = userJs;
      ".mozilla/firefox/squirrel/chrome/userChrome.css".source = cssFile;
    };

  enabledUsers = config.squirrelOS.users.enabled;
in
{
  config = mkIf env.programs.apps.firefox.enable {
    programs.firefox = {
      enable = true;

      policies = {
        DisableTelemetry = true;
        DisableFirefoxStudies = true;
        DisablePocket = true;
        DontCheckDefaultBrowser = true;
        LegacyProfiles = true;
        EnableTrackingProtection = {
          Value = true;
          Locked = true;
          Cryptomining = true;
          Fingerprinting = true;
        };

        SearchEngines = {
          Default = "DuckDuckGo";
          Order = [ "DuckDuckGo" "Google" ];
        };

        Preferences = {
          "browser.newtabpage.activity-stream.feeds.telemetry" = { Value = false; Status = "locked"; };
          "browser.newtabpage.activity-stream.telemetry" = { Value = false; Status = "locked"; };
          "reader.parse-on-load.enabled" = { Value = false; };
          "media.webspeech.synth.enabled" = { Value = false; };
        };
      };

    };

    hjem.users = mkMerge (map (u: { ${u}.files = mkPerUserFiles u; }) enabledUsers);
  };
}

